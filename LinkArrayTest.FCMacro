# Check https://github.com/FreeCAD/FreeCAD/blob/master/src/Mod/TemplatePyMod/TaskPanel.py

from os.path import expanduser
from PySide import QtGui, QtCore

home = expanduser("~")
uiLocation = home + "/.FreeCAD/Macro/LinkArrayTest.ui" # Location I used to store the .ui file


def onDelete(key):
    if key == QtCore.Qt.Key_Delete:
        print("delete")



class SelectionObserver:
    def __init__(self, selList=None):
        self.baseSelection = None
        self.selList = selList  # list to store selections

    def addSelection(self, doc, obj, sub, pos):
        test = Gui.Selection.getSelectionEx("", 0)[0]
        # the first element is the name of the object we want to use
        # Note that if an object inside a sub-assembly is selected, this method will get the entire sub-assembly
        splitedName = test.SubElementNames[0].split(".")
        if self.selList and not self.selList.findItems(splitedName[0], QtCore.Qt.MatchExactly):
            self.selList.addItem(splitedName[0])


class CustomEventFilter(QtCore.QObject):
    def eventFilter(self, obj, event):
        # We will look if focus to the qlistwidget is lost in order to deselect items
        if event.type() == QtCore.QEvent.FocusOut:
            selectedItems = obj.selectedItems()
            for item in selectedItems:
                item.setSelected(False)
            return True
        elif event.type() == QtCore.QEvent.FocusIn:
            Gui.Selection.clearSelection()      # we don't need the selected objects anymore
            return True
        else:
            return QtCore.QObject.eventFilter(self, obj, event)


class LinkArrayTestTaskPanel:
    def __init__(self):
        self.form = Gui.PySideUic.loadUi(uiLocation)
        self.baseSelect = False  # used to know if we are looking for bases
        self.obs = None
        self.form.baseList.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        self.form.baseList.installEventFilter(CustomEventFilter(self.form.baseList))
        delAction = QtGui.QAction("Delete", self.form.baseList)
        delAction.setShortcut(QtGui.QKeySequence.Delete)
        self.form.baseList.addAction(delAction)
        # connect signals and slots
        self.form.baseSelect.clicked.connect(self.baseSelectClick)
        QtCore.QObject.connect(delAction, QtCore.SIGNAL("triggered()"), self.test)

    def baseSelectClick(self):
        if not self.baseSelect:
            self.form.baseSelect.setText("Selecting")
            self.obs = SelectionObserver(self.form.baseList)
            Gui.Selection.addObserver(self.obs)

        else:
            self.form.baseSelect.setText("Select")
            self.obs.selList = None     # stop selecting more items
            Gui.Selection.removeObserver(self.obs)
            #self.deleteKeyCb =
        self.baseSelect = not self.baseSelect   # Toggle every time the button is pressed

    def accept(self):
        Gui.Control.closeDialog()
        if self.obs is not None:
            Gui.Selection.removeObserver(self.obs)  # make sure that the selection observer is deleted

    def reject(self):
        Gui.Control.closeDialog()
        if self.obs is not None:
            Gui.Selection.removeObserver(self.obs)  # make sure that the selection observer is deleted

    def deleteSelectedItems(self):
        selItems = self.form.baseList.selectedItems()
        if selItems is not None:
            print(selItems)

    def test(self):
        print("hello")


panel = LinkArrayTestTaskPanel()
Gui.Control.showDialog(panel)

#obs = SelectionObserver()
#Gui.Selection.addObserver(obs)